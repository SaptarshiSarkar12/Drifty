name: Build and publish Docker images

on:
  push:
    branches: [ "**" ]
    # Publish semver tags as releases.
    tags:
      - "**"
    paths-ignore:
      - "Website/**"
      - "*.md"
  pull_request_target:
    paths-ignore:
      - "Website/**"
      - "*.md"
  workflow_dispatch:
    inputs:
      create_latest:
        description: "Create a latest tag for the image"
        required: true
        type: boolean

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: "ubuntu-latest"
    if: github.repository == 'SaptarshiSarkar12/Drifty'
    strategy:
      matrix:
        filename: [ CLI/Dockerfile, GUI/Dockerfile ]
        docker_context: [CLI, GUI]
        image_name: [ drifty-cli, drifty-gui ]
        exclude:
          - filename: GUI/Dockerfile
            docker_context: CLI
            image_name: drifty-cli
          - filename: GUI/Dockerfile
            docker_context: GUI
            image_name: drifty-cli
          - filename: GUI/Dockerfile
            docker_context: CLI
            image_name: drifty-gui
          - filename: CLI/Dockerfile
            docker_context: GUI
            image_name: drifty-gui
          - filename: CLI/Dockerfile
            docker_context: CLI
            image_name: drifty-gui
          - filename: CLI/Dockerfile
            docker_context: GUI
            image_name: drifty-cli
      fail-fast: false
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get Drifty version
        run: echo "VERSION=$(jq .version version.json | sed -r 's/"//g')" >> $GITHUB_ENV
      - name: Update system packages
        if: matrix.filename == 'GUI/Dockerfile'
        run: sudo apt-get update
      - name: Install build dependencies
        if: matrix.filename == 'GUI/Dockerfile'
        run: |
          sudo apt-get install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libfreetype6-dev
          sudo apt-get install libgl-dev libglib2.0-dev libgtk-3-dev libpango1.0-dev libx11-dev libxtst-dev zlib1g-dev
      - name: Set up GraalVM JDK 21
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          set-java-home: true
          cache: 'maven'
      - name: Package Drifty CLI with GraalVM
        if: matrix.filename == 'CLI/Dockerfile'
        run: mvn -P build-drifty-cli-for-ubuntu-latest package
      - name: Set Up Maven version 3.8.8 # For GUI build issues, maven version 3.8.8 needs to be used
        if: matrix.filename == 'GUI/Dockerfile'
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.8
      - name: Build platform-specific C object for missing jdk libraries
        if: matrix.filename == 'GUI/Dockerfile'
        run: gcc -c config/missing_symbols.c -o config/missing_symbols-ubuntu-latest.o
      - name: Install dependency modules for GUI
        if: matrix.filename == 'GUI/Dockerfile'
        run: mvn -U clean install
      - name: Package Drifty GUI with GraalVM
        if: matrix.filename == 'GUI/Dockerfile'
        run: mvn -P build-drifty-gui-for-ubuntu-latest gluonfx:build gluonfx:package -rf :GUI
      - name: Categorise build artifacts for CLI
        if: matrix.filename == 'CLI/Dockerfile'
        run: |
          mkdir build
          mkdir build/CLI
          mv "CLI/target/CLI/linux/Drifty CLI" "CLI/target/CLI/linux/Drifty_CLI"
          mv "CLI/target/CLI/linux/Drifty_CLI" -t build/CLI
      - name: Categorise build artifacts for GUI
        if: matrix.filename == 'GUI/Dockerfile'
        run: |
          mkdir build
          mkdir build/GUI
          mv GUI/target/gluonfx/x86_64-linux/GUI "GUI/target/gluonfx/x86_64-linux/Drifty_GUI"
          mv "GUI/target/gluonfx/x86_64-linux/Drifty_GUI" -t build/GUI

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      # Login to GitHub Container Registry
      # https://github.com/docker/login-action
      - name: Log into registry
        uses: docker/login-action@v3.0.0
        if: github.event_name != 'pull_request_target'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ inputs.create_latest == true && github.event_name != 'pull_request_target' && github.repository == 'SaptarshiSarkar12/Drifty' && github.ref_name == 'master' }}
            type=raw,value=beta,enable=${{ github.event_name != 'pull_request_target' && github.repository == 'SaptarshiSarkar12/Drifty' && inputs.create_latest == false && github.ref_name == 'master' }}
            type=raw,value=${{ env.VERSION }}-beta,enable=${{ github.event_name != 'pull_request_target' && github.repository == 'SaptarshiSarkar12/Drifty' && inputs.create_latest == false && github.ref_name == 'master' }}
            type=raw,value=${{ env.VERSION }},enable=${{ github.event_name != 'pull_request_target' && github.repository == 'SaptarshiSarkar12/Drifty' && inputs.create_latest == true && github.ref_name == 'master' }}
            type=sha

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.2.0
        with:
          context: build/${{ matrix.docker_context }}
          push: ${{ github.event_name != 'pull_request_target' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Docker/prod/${{ matrix.filename }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6

      - name: Build same image with different tag # cached build, so, will be faster
        run: docker build -t ${{ matrix.image_name }} -f Docker/prod/${{ matrix.filename }} build/${{ matrix.docker_context }}

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@0.18.0
        continue-on-error: true
        with:
          image-ref: ${{ matrix.image_name }}
          format: 'sarif'
          exit-code: 1
          vuln-type: os,library
          ignore-unfixed: true
          output: 'trivy-report.sarif'
          hide-progress: false
          scanners: vuln,secret,misconfig

      - name: Upload Trivy security scan results
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: trivy-report.sarif